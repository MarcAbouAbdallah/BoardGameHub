package ca.mcgill.ecse321.boardgamehub.controller;

import ca.mcgill.ecse321.boardgamehub.model.BorrowRequest;
import ca.mcgill.ecse321.boardgamehub.response.BorrowRequestResponse;
import ca.mcgill.ecse321.boardgamehub.service.BorrowingService;
import java.sql.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/borrowRequests")
public class BorrowRequestController {

    private final BorrowingService borrowingService;

    @Autowired
    public BorrowRequestController(BorrowingService borrowingService) {
        this.borrowingService = borrowingService;
    }

    /**
     * Creates a new borrow request.
     */
    @PostMapping("/create")
    public ResponseEntity<BorrowRequestResponse> createBorrowRequest(
            @RequestParam Integer requesterId,
            @RequestParam Integer requesteeId,
            @RequestParam Integer gameCopyId,
            @RequestParam String comment,
            @RequestParam Date startDate,
            @RequestParam Date endDate) {

        BorrowRequest borrowRequest = borrowingService.createBorrowRequest(requesterId, requesteeId, gameCopyId, comment, startDate, endDate);
        return ResponseEntity.ok(BorrowRequestResponse.fromBorrowRequest(borrowRequest));
    }

    /**
     * Retrieves all borrow requests.
     */
    @GetMapping("/all")
    public ResponseEntity<List<BorrowRequestResponse>> getAllBorrowRequests() {
        List<BorrowRequest> requests = borrowingService.getAllBorrowRequests();
        List<BorrowRequestResponse> responses = requests.stream()
            .map(BorrowRequestResponse::fromBorrowRequest)
            .toList();
        return ResponseEntity.ok(responses);
    }

    /**
     * Retrieves a specific borrow request by ID.
     */
    @GetMapping("/{requestId}")
    public ResponseEntity<BorrowRequestResponse> getBorrowRequestById(@PathVariable Integer requestId) {
        BorrowRequest borrowRequest = borrowingService.findBorrowRequestById(requestId);
        return ResponseEntity.ok(BorrowRequestResponse.fromBorrowRequest(borrowRequest));
    }

    /**
     * Approves a borrow request.
     */
    @PutMapping("/{requestId}/approve")
    public ResponseEntity<BorrowRequestResponse> approveBorrowRequest(@PathVariable Integer requestId) {
        BorrowRequest approvedRequest = borrowingService.approveBorrowRequest(requestId);
        return ResponseEntity.ok(BorrowRequestResponse.fromBorrowRequest(approvedRequest));
    }

    /**
     * Rejects a borrow request.
     */
    @PutMapping("/{requestId}/reject")
    public ResponseEntity<BorrowRequestResponse> rejectBorrowRequest(@PathVariable Integer requestId) {
        BorrowRequest rejectedRequest = borrowingService.rejectBorrowRequest(requestId);
        return ResponseEntity.ok(BorrowRequestResponse.fromBorrowRequest(rejectedRequest));
    }

    /**
     * Deletes a borrow request.
     */
    @DeleteMapping("/{requestId}/delete")
    public ResponseEntity<Void> deleteBorrowRequest(@PathVariable Integer requestId) {
        borrowingService.deleteBorrowRequest(requestId);
        return ResponseEntity.ok().build();
    }
}
