package ca.mcgill.ecse321.boardgamehub.controller;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;

import ca.mcgill.ecse321.boardgamehub.model.Registration;
import ca.mcgill.ecse321.boardgamehub.dto.RegistrationDto;
import ca.mcgill.ecse321.boardgamehub.service.EventService;

@RestController
public class RegistrationController {
    @Autowired
    private EventService registrationService;

    /**
     * Register a player to an event
     * 
     * @param registrationToCreate the registration to be created
     * @return The created registration, including their autogenerated Id
     */
    @PostMapping("registrations")
    @ResponseStatus(HttpStatus.CREATED)
    public RegistrationDto registerToEvent(@RequestBody RegistrationDto registrationToCreate) {
        Registration createdRegistration = registrationService.registerToEvent(registrationToCreate);
        return new RegistrationDto(createdRegistration);
    }

    @PostMapping("registrations/{eventId}/{playerId}")
    @ResponseStatus(HttpStatus.CREATED)
    public void registerToEvent(@PathVariable int eventId, @PathVariable int playerId) {
        registrationService.registerToEvent(eventId, playerId);
    }

    @GetMapping("registrations")
    public List<RegistrationDto> getAllRegistrations() {
        return registrationService.getAllRegistrations()
                           .stream()
                           .map(RegistrationDto::new)
                           .collect(Collectors.toList());

    @GetMapping("registrations/event/{eventId}")
    public List<RegistrationDto> getRegistrationsByEvent(@PathVariable int eventId) {
        return registrationService.getRegistrationsByEvent(eventId)
                           .stream()
                           .map(RegistrationDto::new)
                           .collect(Collectors.toList());
    }

    @GetMapping("registrations/player/{playerId}")
    public List<RegistrationDto> getRegistrationsByPlayer(@PathVariable int playerId) {
        return registrationService.getRegistrationsByPlayer(playerId)
                           .stream()
                           .map(RegistrationDto::new)
                           .collect(Collectors.toList());
    }

    @DeleteMapping("registrations/{eventId}/{playerId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void unregisterFromEvent(@PathVariable int eventId, @PathVariable int playerId) {
        registrationService.unregisterFromEvent(eventId, playerId);
    }
}
