package ca.mcgill.ecse321.boardgamehub.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.CrossOrigin;

import ca.mcgill.ecse321.boardgamehub.dto.PlayerCreationDto;
import ca.mcgill.ecse321.boardgamehub.dto.PlayerLoginDto;
import ca.mcgill.ecse321.boardgamehub.dto.PlayerResponseDto;
import ca.mcgill.ecse321.boardgamehub.dto.PlayerUpdateDto;
import ca.mcgill.ecse321.boardgamehub.model.Player;
import ca.mcgill.ecse321.boardgamehub.service.PlayerService;

@CrossOrigin(origins = "*")
@RestController
public class PlayerController {
    @Autowired
    private PlayerService playerService;


    /**
     * Register a new player
     * 
     * @param playerToCreate the player to be created
     * @return The created player, including their autogenerated Id
     */
    @PostMapping("/players")
    @ResponseStatus(HttpStatus.CREATED)
    public PlayerResponseDto registerPlayer(@RequestBody PlayerCreationDto playerToCreate) {
        Player createdPlayer = playerService.registerPlayer(playerToCreate);
        
        return new PlayerResponseDto(createdPlayer);
    }

    /**
     * Login a player
     * 
     * @param playerToLogin the player to be logged in
     * @return The logged in player
     */
    @PostMapping("/players/login")
    @ResponseStatus(HttpStatus.OK)
    public PlayerResponseDto loginPlayer(@RequestBody PlayerLoginDto playerToLogin) {
        Player loggedInPlayer = playerService.login(playerToLogin);
        return new PlayerResponseDto(loggedInPlayer);
    }

    /**
     * Find a specific player by Id
     * 
     * @param id The primary key of the player to find
     * @return The player with that id
     */
    @GetMapping("/players/{id}")
    @ResponseStatus(HttpStatus.OK)
    public PlayerResponseDto findPlayerById(@PathVariable int id) {
        Player player = playerService.getPlayerById(id);
        return new PlayerResponseDto(player);
    }

    /**
     * Update a player
     * 
     * @param id The primary key of the player to update
     * @param playerToUpdate the player to be updated
     * @return The updated player
     */
    @PutMapping("/players/{id}")
    @ResponseStatus(HttpStatus.OK)
    public PlayerResponseDto updatePlayer(@PathVariable int id, @RequestBody PlayerUpdateDto playerToUpdate) {
        Player updatedPlayer = playerService.updatePlayer(id, playerToUpdate);
        return new PlayerResponseDto(updatedPlayer);
    }
    

    /**
     * Delete a player
     * 
     * @param id The primary key of the player to delete
     */
    @DeleteMapping("/players/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT) 
    public void deletePlayer(@PathVariable int id) {
        playerService.deletePlayer(id);
    }

}
