package ca.mcgill.ecse321.boardgamehub.controller;

import java.util.List;
import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import ca.mcgill.ecse321.boardgamehub.model.Review;
import ca.mcgill.ecse321.boardgamehub.service.ReviewService;
import ca.mcgill.ecse321.boardgamehub.dto.ReviewResponseDto;
import ca.mcgill.ecse321.boardgamehub.dto.ReviewSearchDto;
import ca.mcgill.ecse321.boardgamehub.dto.ReviewUpdateDto;
import ca.mcgill.ecse321.boardgamehub.dto.ReviewCreationDto;

@RestController
public class ReviewController {
    @Autowired
    private ReviewService reviewService;

    /**
     * Create a review for a particular game
     * 
     * @param reviewToCreate the review to be created
     * @return The created review, including their autogenerated Id
     */
    @PostMapping("reviews")
    @ResponseStatus(HttpStatus.CREATED)
    public ReviewResponseDto createReview(@RequestBody ReviewCreationDto reviewToCreate) {
        Review createdReview = reviewService.createReview(reviewToCreate);
        return new ReviewResponseDto(createdReview);
    }

    /**
     * Find a specific review by Id
     * 
     * @param id The primary key of the review to find
     * @return The review with that id
     */
    @GetMapping("reviews/{id}")
    public ReviewResponseDto findReviewById(@PathVariable int id) {
        Review review = reviewService.findReviewById(id);
        return new ReviewResponseDto(review);
    }

    /**
     * Find all reviews for a particular game
     * 
     * @param gameName The name of the game whose reviews are wanted
     * @return A list of reviews for that game
     */
    @GetMapping("reviews/{gameName}")
    public List<ReviewResponseDto> findByGame(@PathVariable String gameName) {
        List<Review> reviewList = reviewService.findByGame(gameName);
        List<ReviewResponseDto> dtoList = new ArrayList<ReviewResponseDto>();
        for (Review review: reviewList) {
            dtoList.add(new ReviewResponseDto(review));
        }
        return dtoList;
    }

    /**
     * Find all reviews for a particular game by a particular person
     * 
     * @param dto a dto containing the id of the reviewer and the name of the game
     * @return A list of reviews for that game
     */
    @GetMapping("reviews/{gameName}/{reviewerId}")
    public List<ReviewResponseDto> findByGame(@RequestBody ReviewSearchDto dto) {
        List<Review> reviewList = reviewService.findByReviewerAndGame(dto);
        List<ReviewResponseDto> dtoList = new ArrayList<ReviewResponseDto>();
        for (Review review: reviewList) {
            dtoList.add(new ReviewResponseDto(review));
        }
        return dtoList;
    }

    /**
     * Delete a particular review
     * 
     * @param id The primary key id of the review to delete
     * @return void
     */
    @DeleteMapping("reviews/{id}")
    public void deleteReview(@PathVariable int id) {
        reviewService.deleteReview(id);
        return;
    }

    /**
     * Edit a particular review
     * 
     * @param reviewToEdit
     * @return the edited review, including their autogenerated id
     */
    @PostMapping
    public ReviewResponseDto editReview(@RequestBody ReviewUpdateDto editedReview) {
        Review changedReview = reviewService.editReview(editedReview);
        return new ReviewResponseDto(changedReview);
    }
}
