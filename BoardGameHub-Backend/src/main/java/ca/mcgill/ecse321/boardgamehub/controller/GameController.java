package ca.mcgill.ecse321.boardgamehub.controller;

import ca.mcgill.ecse321.boardgamehub.model.Game;
import ca.mcgill.ecse321.boardgamehub.dto.GameUpdateDto;
import ca.mcgill.ecse321.boardgamehub.dto.GameCreationDto;
import ca.mcgill.ecse321.boardgamehub.dto.GameResponseDto;
import ca.mcgill.ecse321.boardgamehub.service.GameManagementService;
import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Controller class for handling a games.
 */
@RestController
@RequestMapping("/games")
@Validated
public class GameController {

    @Autowired
    GameManagementService gameManagementService;

    /**
     * Create a new game
     * 
     * @param gameToCreate the game to be created
     * @return The created game, including their autogenerated Id
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public GameResponseDto createGame(@Valid @RequestBody GameCreationDto gameToCreate){
        Game createdGame = gameManagementService.createGame(gameToCreate);

        return new GameResponseDto(createdGame);
    }

    /**
     * Find a specific game by Id
     * 
     * @param id The primary key of the game to find
     * @return The game with that id
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public GameResponseDto findGameById(@PathVariable int id){
        Game game = gameManagementService.findGameById(id);
        return new GameResponseDto(game);
    }

    /**
     * Find all games
     * 
     * @return A list of all games
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public List<GameResponseDto> findAllGames(){
        return gameManagementService.findGames().stream()
        .map(GameResponseDto::new)
        .collect(Collectors.toList());
    }

    /**
     * Delete a particular game
     * 
     * @param id The primary key id of the game to delete
     * @return void
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deleteGame(@PathVariable int id){
        gameManagementService.deleteGame(id);
    }

    /**
     * Update a particular game
     * 
     * @param gameToUpdate
     * @return the updated game, including their autogenerated id
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public GameResponseDto updateGame(@PathVariable int id, @Valid @RequestBody GameUpdateDto gameToUpdate){
        Game updatedGame = gameManagementService.updateGame(gameToUpdate, id);
        return new GameResponseDto(updatedGame);
    }

}
